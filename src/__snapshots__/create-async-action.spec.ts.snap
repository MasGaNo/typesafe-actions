// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async action with any type fetchUsersAsync.failure(
      1
    ) 1`] = `"T.PayloadAction<\\"FETCH_USERS_FAILURE\\", any>"`;

exports[`async action with any type fetchUsersAsync.request(
      1
    ) 1`] = `"T.PayloadAction<\\"FETCH_USERS_REQUEST\\", any>"`;

exports[`async action with any type fetchUsersAsync.success([
      1,
    ]) 1`] = `"T.PayloadAction<\\"FETCH_USERS_SUCCESS\\", any[]>"`;

exports[`async action with cancel fetchUsersAsync.cancel(
      'reason'
    ) 1`] = `"T.PayloadAction<\\"FETCH_USERS_CANCEL\\", string>"`;

exports[`async action with cancel fetchUsersAsync.failure(
      Error('reason')
    ) 1`] = `"T.PayloadAction<\\"FETCH_USERS_FAILURE\\", Error>"`;

exports[`async action with cancel fetchUsersAsync.request() 1`] = `"T.EmptyAction<\\"FETCH_USERS_REQUEST\\">"`;

exports[`async action with cancel fetchUsersAsync.success([
      { firstName: 'Piotr', lastName: 'Witek' },
    ]) 1`] = `"T.PayloadAction<\\"FETCH_USERS_SUCCESS\\", User[]>"`;

exports[`async action with cancel fn(fetchUsersAsync) 1`] = `"Pick<{ request: T.EmptyAC<\\"FETCH_USERS_REQUEST\\">; success: T.PayloadAC<\\"FETCH_USERS_SUCCESS\\", User[]>; failure: T.PayloadAC<\\"FETCH_USERS_FAILURE\\", Error>; cancel: T.PayloadAC<\\"FETCH_USERS_CANCEL\\", string>; }, \\"request\\" | \\"success\\" | \\"failure\\" | \\"cancel\\">"`;

exports[`async action with undefined type fetchUsersAsync.cancel 1`] = `"Property 'cancel' does not exist on type 'Pick<{ request: EmptyAC<\\"FETCH_USERS_REQUEST\\">; success: PayloadAC<\\"FETCH_USERS_SUCCESS\\", User[]>; failure: PayloadAC<\\"FETCH_USERS_FAILURE\\", Error>; cancel: never; }, \\"request\\" | \\"success\\" | \\"failure\\">'."`;

exports[`async action with undefined type fetchUsersAsync.failure(
      Error('reason')
    ) 1`] = `"T.PayloadAction<\\"FETCH_USERS_FAILURE\\", Error>"`;

exports[`async action with undefined type fetchUsersAsync.request() 1`] = `"T.EmptyAction<\\"FETCH_USERS_REQUEST\\">"`;

exports[`async action with undefined type fetchUsersAsync.success([
      { firstName: 'Piotr', lastName: 'Witek' },
    ]) 1`] = `"T.PayloadAction<\\"FETCH_USERS_SUCCESS\\", User[]>"`;

exports[`async action with undefined type fn(fetchUsersAsync) 1`] = `"Pick<{ request: T.EmptyAC<\\"FETCH_USERS_REQUEST\\">; success: T.PayloadAC<\\"FETCH_USERS_SUCCESS\\", User[]>; failure: T.PayloadAC<\\"FETCH_USERS_FAILURE\\", Error>; cancel: never; }, \\"request\\" | \\"success\\" | \\"failure\\">"`;
